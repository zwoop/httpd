<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision$ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_lua.xml.meta">

<name>mod_lua</name>

<description>Provides Lua hooks into various portions of the httpd
request processing</description>
<status>Experimental</status>
<sourcefile>mod_lua.c</sourcefile>
<identifier>lua_module</identifier>
<compatibility>2.3 and later</compatibility>

<summary>
<p>This module allows the server to be extended with scripts written in the
Lua programming language.  The extension points (hooks) available with
<module>mod_lua</module> include many of the hooks available to
natively compiled Apache HTTP Server modules, such as mapping requests to
files, generating dynamic responses, access control, authentication, and
authorization</p>

<p>More information on the Lua programming language can be found at the
<a href="http://www.lua.org/">the Lua website</a>.</p>

<note><code>mod_lua</code> is still in experimental state.
Until it is declared stable, usage and behavior may change
at any time, even between stable releases of the 2.4.x series.
Be sure to check the CHANGES file before upgrading.</note>

</summary>

<section id="basicconf"><title>Basic Configuration</title>

<p>The basic module loading directive is</p>

<highlight language="config">
    LoadModule lua_module modules/mod_lua.so
</highlight>

<p>
<code>mod_lua</code> provides a handler named <code>lua-script</code>,
which can be used with an <code>AddHandler</code> directive:</p>

<highlight language="config">
AddHandler lua-script .lua
</highlight>

<p>
This will cause <code>mod_lua</code> to handle requests for files
ending in <code>.lua</code> by invoking that file's
<code>handle</code> function.
</p>
<!--
<p>For more flexibility, see <directive>LuaMapHandler</directive>.
</p>
-->
</section>

<section id="writinghandlers"><title>Writing Handlers</title>
<p> In the Apache HTTP Server API, the handler is a specific kind of hook
responsible for generating the response.  Examples of modules that include a
handler are <module>mod_proxy</module>, <module>mod_cgi</module>,
and <module>mod_status</module>.</p>

<p><code>mod_lua</code> always looks to invoke a Lua function for the handler, rather than
just evaluating a script body CGI style. A handler function looks
something like this:</p>


<highlight language="lua">
<strong>example.lua</strong>
-- example handler

require "string"

--[[
     This is the default method name for Lua handlers, see the optional
     function-name in the LuaMapHandler directive to choose a different
     entry point.
--]]
function handle(r)
    r.content_type = "text/plain"
    r:puts("Hello Lua World!\n")

    if r.method == 'GET' then
        for k, v in pairs( r:parseargs() ) do
            r:puts( string.format("%s: %s\n", k, v) )
        end
    elseif r.method == 'POST' then
        for k, v in pairs( r:parsebody() ) do
            r:puts( string.format("%s: %s\n", k, v) )
        end
    else
        r:puts("Unsupported HTTP method " .. r.method)
    end
end
</highlight>

<p>
This handler function just prints out the uri or form encoded
arguments to a plaintext page.
</p>

<p>
This means (and in fact encourages) that you can have multiple
handlers (or hooks, or filters) in the same script.
</p>

</section>

<section id="writingauthzproviders">
<title>Writing Authorization Providers</title>

<p><module>mod_authz_core</module> provides a high-level interface to
authorization that is much easier to use than using into the relevant
hooks directly. The first argument to the
<directive module="mod_authz_core">Require</directive> directive gives
the name of the responsible authorization provider. For any
<directive module="mod_authz_core">Require</directive> line,
<module>mod_authz_core</module> will call the authorization provider
of the given name, passing the rest of the line as parameters. The
provider will then check authorization and pass the result as return
value.</p>

<p>The authz provider is normally called before authentication. If it needs to
know the authenticated user name (or if the user will be authenticated at
all), the provider must return <code>apache2.AUTHZ_DENIED_NO_USER</code>.
This will cause authentication to proceed and the authz provider to be
called a second time.</p>

<p>The following authz provider function takes two arguments, one ip
address and one user name. It will allow access from the given ip address
without authentication, or if the authenticated user matches the second
argument:</p>

<highlight language="lua">
<strong>authz_provider.lua</strong>

require 'apache2'

function authz_check_foo(r, ip, user)
    if r.useragent_ip == ip then
        return apache2.AUTHZ_GRANTED
    elseif r.user == nil then
        return apache2.AUTHZ_DENIED_NO_USER
    elseif r.user == user then
        return apache2.AUTHZ_GRANTED
    else
        return apache2.AUTHZ_DENIED
    end
end
</highlight>

<p>The following configuration registers this function as provider
<code>foo</code> and configures it for URL <code>/</code>:</p>
<highlight language="config">
LuaAuthzProvider foo authz_provider.lua authz_check_foo
&lt;Location /&gt;
  Require foo 10.1.2.3 john_doe
&lt;/Location&gt;
</highlight>

</section>

<section id="writinghooks"><title>Writing Hooks</title>

<p>Hook functions are how modules (and Lua scripts) participate in the
processing of requests. Each type of hook exposed by the server exists for
a specific purpose, such as mapping requests to the filesystem,
performing access control, or setting mimetypes.  General purpose hooks
that simply run at handy times in the request lifecycle exist as well.</p>

<p>Hook functions are passed the request object as their only argument.
They can return any value, depending on the hook, but most commonly
they'll return OK, DONE, or DECLINED, which you can write in lua as
<code>apache2.OK</code>, <code>apache2.DONE</code>, or
<code>apache2.DECLINED</code>, or else an HTTP status code.</p>

<highlight language="lua">
<strong>translate_name.lua</strong>
-- example hook that rewrites the URI to a filesystem path.

require 'apache2'

function translate_name(r)
    if r.uri == "/translate-name" then
        r.filename = r.document_root .. "/find_me.txt"
        return apache2.OK
    end
    -- we don't care about this URL, give another module a chance
    return apache2.DECLINED
end
</highlight>

<highlight language="lua">
<strong>translate_name2.lua</strong>
--[[ example hook that rewrites one URI to another URI. It returns a
     apache2.DECLINED to give other URL mappers a chance to work on the
     substitution, including the core translate_name hook which maps based
     on the DocumentRoot.

     Note: It is currently undefined as to whether this runs before or after
     mod_alias.
--]]

require 'apache2'

function translate_name(r)
    if r.uri == "/translate-name" then
        r.uri = "/find_me.txt"
        return apache2.DECLINED
    end
    return apache2.DECLINED
end
</highlight>
</section>

<section id="datastructures"><title>Data Structures</title>

<dl>
<dt>request_rec</dt>
        <dd>
        <p>The request_rec is mapped in as a userdata. It has a metatable
        which lets you do useful things with it. For the most part it
        has the same fields as the request_rec struct (see httpd.h
        until we get better docs here) many of which are writeable as
        well as readable.  (The table fields' content can be changed, but the
        fields themselves cannot be set to different tables.)</p>

        <table border="1">

        <tr>
          <th><strong>Name</strong></th>
          <th><strong>Lua type</strong></th>
          <th><strong>Writable</strong></th>
        </tr>
        <tr>
          <td><code>ap_auth_type</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>args</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>assbackwards</code></td>
          <td>boolean</td>
          <td>no</td>
        </tr>

        <tr>
          <td><code>canonical_filename</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>content_encoding</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>content_type</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>context_prefix</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>context_document_root</code></td>
          <td>string</td>
          <td>no</td>
        </tr>

        <tr>
          <td><code>document_root</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>err_headers_out</code></td>
          <td>table</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>filename</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>handler</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>

        <tr>
          <td><code>headers_in</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>headers_out</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>hostname</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>log_id</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>method</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>notes</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>path_info</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>protocol</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>proxyreq</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>range</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>subprocess_env</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>status</code></td>
          <td>number</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>the_request</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>unparsed_uri</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>uri</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>user</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>useragent_ip</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        </table>

        <p>The request_rec has (at least) the following methods:</p>

        <highlight language="lua">
        r:addoutputfilter(name|function) -- add an output filter
        </highlight>

        <highlight language="lua">
r:parseargs() -- returns two tables; one standard key/value table for regular GET data, 
              -- and one for multi-value data (fx. foo=1&amp;foo=2&amp;foo=3):

local GET, GETMULTI = r:parseargs()
r:puts("Your name is: " .. GET['name'] or "Unknown")
</highlight>

<highlight language="lua">
r:parsebody([sizeLimit]) -- parse the request body as a POST and return two lua tables,
                         -- just like r:parseargs().
                         -- An optional number may be passed to specify the maximum number 
                         -- of bytes to parse. Default is 8192 bytes:
                 
local POST, POSTMULTI = r:parsebody(1024*1024)
r:puts("Your name is: " .. POST['name'] or "Unknown")
</highlight>
        <highlight language="lua">
        r:puts("hello", " world", "!") -- print to response body
        </highlight>

        <highlight language="lua">
        r:write("a single string") -- print to response body
        </highlight>
        
        <highlight language="lua">
r:dbacquire(dbType[, dbParams]) -- Acquires a connection to a database and returns a database class.
                                -- See '<a href="#databases">Database connectivity</a>' for details.
        </highlight>
        </dd>
    </dl>

</section>

<section id="logging"><title>Logging Functions</title>

<highlight language="lua">
        -- examples of logging messages<br />
        r:trace1("This is a trace log message") -- trace1 through trace8 can be used <br />
        r:debug("This is a debug log message")<br />
        r:info("This is an info log message")<br />
        r:notice("This is a notice log message")<br />
        r:warn("This is a warn log message")<br />
        r:err("This is an err log message")<br />
        r:alert("This is an alert log message")<br />
        r:crit("This is a crit log message")<br />
        r:emerg("This is an emerg log message")<br />
</highlight>

</section>

<section id="apache2"><title>apache2 Package</title>
<p>A package named <code>apache2</code> is available with (at least) the following contents.</p>
<dl>
  <dt>apache2.OK</dt>
  <dd>internal constant OK.  Handlers should return this if they've
  handled the request.</dd>
  <dt>apache2.DECLINED</dt>
  <dd>internal constant DECLINED.  Handlers should return this if
  they are not going to handle the request.</dd>
  <dt>apache2.DONE</dt>
  <dd>internal constant DONE.</dd>
  <dt>apache2.version</dt>
  <dd>Apache HTTP server version string</dd>
  <dt>apache2.HTTP_MOVED_TEMPORARILY</dt>
  <dd>HTTP status code</dd>
  <dt>apache2.PROXYREQ_NONE, apache2.PROXYREQ_PROXY, apache2.PROXYREQ_REVERSE, apache2.PROXYREQ_RESPONSE</dt>
  <dd>internal constants used by <module>mod_proxy</module></dd>
</dl>
<p>(Other HTTP status codes are not yet implemented.)</p>
</section>

<section id="databases">
    <title>Database connectivity</title>
    <p>
    Mod_lua implements a simple database feature for querying and running commands
    on the most popular database engines (mySQL, PostgreSQL, FreeTDS, ODBC, SQLite, Oracle)
    as well as mod_dbd.
    </p>
    <p>Connecting and firing off queries is as easy as:</p>
    <highlight language="lua">
function handler(r)
    local database, err = r:dbacquire("mysql", "server=localhost&amp;user=root&amp;database=mydb")
    if not err then
        local results, err = database:select(r, "SELECT `name`, `age` FROM `people` WHERE 1")
        if not err then
            local rows = results(0) -- fetch all rows synchronously
            for k, row in pairs(rows) do
                r:puts( string.format("Name: %s, Age: %s&lt;br/&gt;", row[1], row[2]) )
            end
        else
            r:puts("Database query error: " .. err)
        end
        database:close()
    else
        r:puts("Could not connect to the database: " .. err)
    end
end
    </highlight>
    <p>
    To utilize <module>mod_dbd</module>, simply specify <code>mod_dbd</code>
    as the database type, or leave the field blank:
    </p>
    <highlight language="lua">
    local database = r:dbacquire("mod_dbd")
    </highlight>
    <section id="database_object">
        <title>Database object and contained functions</title>
        <p>The database object returned by <code>dbacquire</code> has the following methods:</p>
        <p><strong>Normal select and query from a database:</strong></p>
    <highlight language="lua">
-- Run a statement and return the number of rows affected:
local affected, errmsg = database:query(r, "DELETE FROM `tbl` WHERE 1")

-- Run a statement and return a result set that can be used synchronously or async:
local result, errmsg = database:select(r, "SELECT * FROM `people` WHERE 1")
    </highlight>
        <p><strong>Using prepared statements (recommended):</strong></p>
    <highlight language="lua">
-- Create and run a prepared statement:
local statement, errmsg = database:prepare(r, "DELETE FROM `tbl` WHERE `age` > %u")
if not errmsg then
    local result, errmsg = statement:query(20) -- run the statement with age >20
end

-- Fetch a prepared statement from a DBDPrepareSQL directive:
local statement, errmsg = database:prepared(r, "someTag")
if not errmsg then
    local result, errmsg = statement:select("John Doe", 123) -- inject the values "John Doe" and 123 into the statement
end

</highlight>
        <p><strong>Escaping values, closing databases etc:</strong></p>
    <highlight language="lua">
-- Escape a value for use in a statement:
local escaped = database:escape(r, [["'|blabla]])

-- Close a database connection and free up handles:
database:close()

-- Check whether a database connection is up and running:
local connected = database:active()
    </highlight>
    </section>
    <section id="result_sets">
    <title>Working with result sets</title>
    <p>The result set returned by <code>db:select</code> or by the prepared statement functions 
    created through <code>db:prepare</code> can be used to
    fetch rows synchronously or asynchronously, depending on the row number specified:<br/>
    <code>result(0)</code> fetches all rows in a synchronous manner, returning a table of rows.<br/>
    <code>result(-1)</code> fetches the next available row in the set, asynchronously.<br/>
    <code>result(N)</code> fetches row number <code>N</code>, asynchronously:
    </p>
    <highlight language="lua">
-- fetch a result set using a regular query:
local result, err = db:select(r, "SELECT * FROM `tbl` WHERE 1")

local rows = result(0) -- Fetch ALL rows synchronously
local row = result(-1) -- Fetch the next available row, asynchronously
local row = result(1234) -- Fetch row number 1234, asynchronously
    </highlight>
    <p>One can construct a function that returns an iterative function to iterate over all rows 
    in a synchronous or asynchronous way, depending on the async argument:
    </p>
    <highlight language="lua">
function rows(resultset, async)
    local a = 0
    local function getnext()
        a = a + 1
        local row = resultset(-1)
        return row and a or nil, row
    end
    if not async then
        return pairs(resultset(0))
    else
        return getnext, self
    end
end

local statement, err = db:prepare(r, "SELECT * FROM `tbl` WHERE `age` > %u")
if not err then
     -- fetch rows asynchronously:
    local result, err = statement:select(20)
    if not err then
        for index, row in rows(result, true) do
            ....
        end
    end

     -- fetch rows synchronously:
    local result, err = statement:select(20)
    if not err then
        for index, row in rows(result, false) do
            ....
        end
    end
end
    </highlight>
    </section>
    <section id="closing_databases">
        <title>Closing a database connection</title>

    <p>Database handles should be closed using <code>database:close()</code> when they are no longer
    needed. If you do not close them manually, they will eventually be garbage collected and 
    closed by mod_lua, but you may end up having too many unused connections to the database 
    if you leave the closing up to mod_lua. Essentially, the following two measures are
    the same:
    </p>
    <highlight language="lua">
-- Method 1: Manually close a handle
local database = r:dbacquire("mod_dbd")
database:close() -- All done

-- Method 2: Letting the garbage collector close it
local database = r:dbacquire("mod_dbd")
database = nil -- throw away the reference
collectgarbage() -- close the handle via GC
</highlight>
    </section>
    <section id="database_caveat">
    <title>Precautions when working with databases</title>
    <p>Although the standard <code>query</code> and <code>run</code> functions are freely 
    available, it is recommended that you use prepared statements whenever possible, to 
    both optimize performance (if your db handle lives on for a long time) and to minimize 
    the risk of SQL injection attacks. <code>run</code> and <code>query</code> should only
    be used when there are no variables inserted into a statement (a static statement). 
    When using dynamic statements, use <code>db:prepare</code> or <code>db:prepared</code>.
    </p>
    </section>

</section>

<directivesynopsis>
<name>LuaRoot</name>
<description>Specify the base path for resolving relative paths for mod_lua directives</description>
<syntax>LuaRoot /path/to/a/directory</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Specify the base path which will be used to evaluate all
    relative paths within mod_lua. If not specified they
    will be resolved relative to the current working directory,
    which may not always work well for a server.</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaScope</name>
<description>One of once, request, conn, thread -- default is once</description>
<syntax>LuaScope once|request|conn|thread</syntax>
<default>LuaScope once</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Specify the lifecycle scope of the Lua interpreter which will
    be used by handlers in this "Directory." The default is "once"</p>

   <dl>
    <dt>once:</dt> <dd>use the interpreter once and throw it away.</dd>

    <dt>request:</dt> <dd>use the interpreter to handle anything based on
             the same file within this request, which is also
             request scoped.</dd>

    <dt>conn:</dt> <dd>Same as request but attached to the connection_rec</dd>
    <dt>thread:</dt> <dd>Use the interpreter for the lifetime of the thread 
            handling the request (only available with threaded MPMs).</dd>
<!-- not implemented
    <dt>server:</dt>  <dd>This one is different than others because the
            server scope is quite long lived, and multiple threads
            will have the same server_rec. To accommodate this
            server scoped interpreter are stored in an apr
            resource list. The min and max arguments are intended
            to specify the pool size, but are unused at this time.</dd>
-->
   </dl>
</usage>
</directivesynopsis>

<!--
/* Not implemented in 2.4.x yet */
<directivesynopsis>
<name>LuaMapHandler</name>
<description>Map a path to a lua handler</description>
<syntax>LuaMapHandler uri-pattern /path/to/lua/script.lua [function-name]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<usage>
    <p>This directive matches a uri pattern to invoke a specific
    handler function in a specific file. It uses PCRE regular
    expressions to match the uri, and supports interpolating
    match groups into both the file path and the function name
    be careful writing your regular expressions to avoid security
    issues.</p>
   <example><title>Examples:</title>
   <highlight language="config">
    LuaMapHandler /(\w+)/(\w+) /scripts/$1.lua handle_$2
    </highlight>
   </example>
        <p>This would match uri's such as /photos/show?id=9
        to the file /scripts/photos.lua and invoke the
        handler function handle_show on the lua vm after
        loading that file.</p>

<highlight language="config">
    LuaMapHandler /bingo /scripts/wombat.lua
</highlight>
        <p>This would invoke the "handle" function, which
        is the default if no specific function name is
        provided.</p>
</usage>
</directivesynopsis>
-->

<directivesynopsis>
<name>LuaPackagePath</name>
<description>Add a directory to lua's package.path</description>
<syntax>LuaPackagePath /path/to/include/?.lua</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>Add a path to lua's module search path. Follows the same
    conventions as lua. This just munges the package.path in the
    lua vms.</p>

    <example><title>Examples:</title>
    <highlight language="config">
LuaPackagePath /scripts/lib/?.lua
LuaPackagePath /scripts/lib/?/init.lua
    </highlight>
    </example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaPackageCPath</name>
<description>Add a directory to lua's package.cpath</description>
<syntax>LuaPackageCPath /path/to/include/?.soa</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Add a path to lua's shared library search path. Follows the same
    conventions as lua. This just munges the package.cpath in the
    lua vms.</p>

</usage>
</directivesynopsis>

<!-- Not implemented yet
<directivesynopsis>
<name>LuaCodeCache</name>
<description>Configure the compiled code cache.</description>
<syntax>LuaCodeCache stat|forever|never</syntax>
<default>LuaCodeCache stat</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage><p>
    Specify the behavior of the in-memory code cache. The default
    is stat, which stats the top level script (not any included
    ones) each time that file is needed, and reloads it if the
    modified time indicates it is newer than the one it has
    already loaded. The other values cause it to keep the file
    cached forever (don't stat and replace) or to never cache the
    file.</p>

    <p>In general stat or forever is good for production, and stat or never
    for development.</p>

    <example><title>Examples:</title>
    <highlight language="config">
LuaCodeCache stat
LuaCodeCache forever
LuaCodeCache never
    </highlight>
    </example>

</usage>
</directivesynopsis>
-->

<directivesynopsis>
<name>LuaHookTranslateName</name>
<description>Provide a hook for the translate name phase of request processing</description>
<syntax>LuaHookTranslateName  /path/to/lua/script.lua  hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>

<usage><p>
    Add a hook (at APR_HOOK_MIDDLE) to the translate name phase of
    request processing. The hook function receives a single
    argument, the request_rec, and should return a status code,
    which is either an HTTP error code, or the constants defined
    in the apache2 module: apache2.OK, apache2.DECLINED, or
    apache2.DONE. </p>

    <p>For those new to hooks, basically each hook will be invoked
    until one of them returns apache2.OK. If your hook doesn't
    want to do the translation it should just return
    apache2.DECLINED. If the request should stop processing, then
    return apache2.DONE.</p>

    <p>Example:</p>

<highlight language="config">
# httpd.conf
LuaHookTranslateName /scripts/conf/hooks.lua silly_mapper
</highlight>

<highlight language="lua">
-- /scripts/conf/hooks.lua --
require "apache2"
function silly_mapper(r)
    if r.uri == "/" then
        r.filename = "/var/www/home.lua"
        return apache2.OK
    else
        return apache2.DECLINED
    end
end
</highlight>

   <note><title>Context</title><p>This directive is not valid in <directive
   type="section" module="core">Directory</directive>, <directive
   type="section" module="core">Files</directive>, or htaccess
   context.</p></note>

   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookFixups</name>
<description>Provide a hook for the fixups phase of request
processing</description>
<syntax>LuaHookFixups  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<usage>
<p>
    Just like LuaHookTranslateName, but executed at the fixups phase
</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookMapToStorage</name>
<description>Provide a hook for the map_to_storage phase of request processing</description>
<syntax>LuaHookMapToStorage  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>...</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookCheckUserID</name>
<description>Provide a hook for the check_user_id phase of request processing</description>
<syntax>LuaHookCheckUserID  /path/to/lua/script.lua hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage><p>...</p>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookTypeChecker</name>
<description>Provide a hook for the type_checker phase of request processing</description>
<syntax>LuaHookTypeChecker  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>...</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookAuthChecker</name>
<description>Provide a hook for the auth_checker phase of request processing</description>
<syntax>LuaHookAuthChecker  /path/to/lua/script.lua hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage>
<p>Invoke a lua function in the auth_checker phase of processing
a request.  This can be used to implement arbitrary authentication
and authorization checking.  A very simple example:
</p>
<highlight language="lua">
require 'apache2'

-- fake authcheck hook
-- If request has no auth info, set the response header and
-- return a 401 to ask the browser for basic auth info.
-- If request has auth info, don't actually look at it, just
-- pretend we got userid 'foo' and validated it.
-- Then check if the userid is 'foo' and accept the request.
function authcheck_hook(r)

   -- look for auth info
   auth = r.headers_in['Authorization']
   if auth ~= nil then
     -- fake the user
     r.user = 'foo'
   end

   if r.user == nil then
      r:debug("authcheck: user is nil, returning 401")
      r.err_headers_out['WWW-Authenticate'] = 'Basic realm="WallyWorld"'
      return 401
   elseif r.user == "foo" then
      r:debug('user foo: OK')
   else
      r:debug("authcheck: user='" .. r.user .. "'")
      r.err_headers_out['WWW-Authenticate'] = 'Basic realm="WallyWorld"'
      return 401
   end
   return apache2.OK
end
</highlight>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookAccessChecker</name>
<description>Provide a hook for the access_checker phase of request processing</description>
<syntax>LuaHookAccessChecker  /path/to/lua/script.lua  hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage>
<p>Add your hook to the access_checker phase.  An access checker
hook function usually returns OK, DECLINED, or HTTP_FORBIDDEN.</p>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookInsertFilter</name>
<description>Provide a hook for the insert_filter phase of request processing</description>
<syntax>LuaHookInsertFilter  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>Not Yet Implemented</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaInherit</name>
<description>Controls how parent configuration sections are merged into children</description>
<syntax>LuaInherit none|parent-first|parent-last</syntax>
<default>LuaInherit parent-first</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>2.4.0 and later</compatibility>
    <usage><p>By default, if LuaHook* directives are used in overlapping
    Directory or Location configuration sections, the scripts defined in the
    more specific section are run <em>after</em> those defined in the more
    generic section (LuaInherit parent-first).  You can reverse this order, or
    make the parent context not apply at all.</p>
    
    <p> In previous 2.3.x releases, the default was effectively to ignore LuaHook*
    directives from parent configuration sections.</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaQuickHandler</name>
<description>Provide a hook for the quick handler of request processing</description>
<syntax>LuaQuickHandler /path/to/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
</contextlist>
<override>All</override>
<usage><p>...</p>
   <note><title>Context</title><p>This directive is not valid in <directive
   type="section" module="core">Directory</directive>, <directive
   type="section" module="core">Files</directive>, or htaccess
   context.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaAuthzProvider</name>
<description>Plug an authorization provider function into <module>mod_authz_core</module>
</description>
<syntax>LuaAuthzProvider provider_name /path/to/lua/script.lua function_name</syntax>
<contextlist><context>server config</context> </contextlist>
<compatibility>2.4.3 and later</compatibility>

<usage>
<p>After a lua function has been registered as authorization provider, it can be used
with the <directive module="mod_authz_core">Require</directive> directive:</p>

<example>
<highlight language="config">
LuaRoot /usr/local/apache2/lua
LuaAuthzProvider foo authz.lua authz_check_foo
&lt;Location /&gt;
  Require foo bar
&lt;/Location&gt;
</highlight>
</example>

</usage>
</directivesynopsis>


</modulesynopsis>
